module EthscriptionsEscrower {
  struct Ethscription {
    ethscriptionId: Bytes32;
    owner: Address;
    depositBlockNumber: Uint256;
  }

  // Use `storage` keyword to specify storage data structures
  storage mutable ETHSCRIPTIONS: Map<Bytes32, Ethscription>;
  storage mutable SETTLED: Map<Bytes32, Bool>;

  event EthscriptionDeposited(owner: Address, ethscriptionId: Bytes32);
  event EthscriptionTransferred(previousOwner: Address, recipient: Address, ethscriptionId: Bytes32);

  public constant ETHSCRIPTION_TRANSFER_COOLDOWN_BLOCKS: Uint256 = 5;

  storage mutable STORAGE_SLOT := keccak256('ethscriptions.contracts.storage.EthscriptionsEscrowerStorage');

  // Define the Layout struct
  struct Layout {
    slot: StorageSlot;
  }

  public function depositEthscription(ethscriptionId: Bytes32) {
    require(!ethscriptionSettled()[ethscriptionId], 'Ethscription already settled');
    require(ethscriptions()[ethscriptionId].owner == address(0), 'Ethscription already deposited');

    ethscriptions()[ethscriptionId] = Ethscription(ethscriptionId, msg.sender, block.number);
    ethscriptionSettled()[ethscriptionId] = false;

    emit EthscriptionDeposited(msg.sender, ethscriptionId);
  }

  public function transferEthscription(ethscriptionId: Bytes32, recipient: Address) {
    require(ethscriptions()[ethscriptionId].owner == msg.sender, 'Only owner can transfer');
    require(!ethscriptionSettled()[ethscriptionId], 'Ethscription settled');
    require(block.number >= ethscriptions()[ethscriptionId].depositBlockNumber + ETHSCRIPTION_TRANSFER_COOLDOWN_BLOCKS, 'Transfer cooldown not met');

    ethscriptions()[ethscriptionId].owner = recipient;

    emit EthscriptionTransferred(msg.sender, recipient, ethscriptionId);
  }
}
