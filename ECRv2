module EthscriptionsEscrower
  struct Ethscription
    ethscriptionId: Bytes32
    owner: Address
    depositBlockNumber: Uint256

  internal mutable ETHSCRIPTIONS: Map<Bytes32, Ethscription>

  internal pure function ethscriptions(): Map<Bytes32, Ethscription>
    return

  internal pure function ethscriptionSettled(): Map<Bytes32, Bool>
    return

  internal mutable SETTLED: Map<Bytes32, Bool>

  event EthscriptionDeposited(owner: Address, ethscriptionId: Bytes32)
  event EthscriptionTransferred(previousOwner: Address, recipient: Address, ethscriptionId: Bytes32)

  public constant ETHSCRIPTION_TRANSFER_COOLDOWN_BLOCKS: Uint256 = 5

  internal mutable STORAGE_SLOT := keccak256('ethscriptions.contracts.storage.EthscriptionsEscrowerStorage')

  internal pure function s(): Layout
    slot := STORAGE_SLOT
    return

  public function depositEthscription(ethscriptionId: Bytes32)
    require not ethscriptionSettled()[ethscriptionId], 'Ethscription already settled'
    require ethscriptions()[ethscriptionId].owner == address(0), 'Ethscription already deposited'

    ethscriptions()[ethscriptionId] = Ethscription(ethscriptionId, msg.sender, block.number)
    ethscriptionSettled()[ethscriptionId] = false

    emit EthscriptionDeposited(msg.sender, ethscriptionId)
  end

  public function transferEthscription(ethscriptionId: Bytes32, recipient: Address)
    require ethscriptions()[ethscriptionId].owner == msg.sender, 'Only owner can transfer'
    require not ethscriptionSettled()[ethscriptionId], 'Ethscription settled'
    require block.number >= ethscriptions()[ethscriptionId].depositBlockNumber + ETHSCRIPTION_TRANSFER_COOLDOWN_BLOCKS, 'Transfer cooldown not met'

    ethscriptions()[ethscriptionId].owner = recipient

    emit EthscriptionTransferred(msg.sender, recipient, ethscriptionId)
  end
end
